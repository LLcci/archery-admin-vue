/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/admin/archery/scoring/page': {
    /** 分页计分本列表 */
    post: operations['ScoringController_getScoringPageList']
  }
  '/admin/archery/scoring/save': {
    /** 保存计分本 */
    post: operations['ScoringController_saveScoring']
  }
  '/admin/archery/scoring/student/page': {
    /** 学员分页计分本列表 */
    post: operations['ScoringController_getScoringPageListByStudent']
  }
  '/admin/archery/scoring/trainer/page': {
    /** 教练分页计分本列表 */
    post: operations['ScoringController_getScoringPageListByTrainer']
  }
  '/admin/archery/scoring/id': {
    /** id查询计分本 */
    get: operations['ScoringController_getScoringById']
  }
  '/admin/archery/scoring/member/id': {
    /** id查询计分本(会员) */
    get: operations['ScoringController_getMemberScoringById']
  }
  '/admin/archery/scoring/delete': {
    /** id删除计分本 */
    post: operations['ScoringController_deleteScoringById']
  }
  '/admin/archery/scoring/student/summary': {
    /** 训练汇总 */
    get: operations['ScoringController_summaryByStudent']
  }
  '/admin/archery/scoring/student/statistics/summary': {
    /** 训练统计-训练汇总 */
    get: operations['ScoringController_getStatisticsSummaryByStudent']
  }
  '/admin/archery/scoring/student/statistics/arrowCount': {
    /** 训练统计-箭数概况 */
    get: operations['ScoringController_getStatisticsArrowCountByStudent']
  }
  '/admin/archery/scoring/student/statistics/charts': {
    /** 训练统计-图表 */
    get: operations['ScoringController_getStatisticsChartsByStudent']
  }
  '/admin/archery/timer/page': {
    /** 分页定时器房间列表 */
    post: operations['TimerController_getTimerPageList']
  }
  '/admin/archery/timer/save': {
    /** 保存定时器 */
    post: operations['TimerController_saveTimer']
  }
  '/admin/archery/timer/id': {
    /** 根据id获取定时器 */
    get: operations['TimerController_getTimerById']
  }
  '/admin/archery/timer/delete': {
    /** id删除定时器 */
    post: operations['TimerController_deleteTimerById']
  }
  '/admin/archery/timer/user': {
    /** 获取用户创建或参与的定时器 */
    get: operations['TimerController_getTimerByUser']
  }
  '/admin/archery/timer/join': {
    /** 加入定时器 */
    get: operations['TimerController_joinTimerByUser']
  }
  '/admin/archery/timer/start': {
    /** 根据id开始定时器 */
    get: operations['TimerController_startTimer']
  }
  '/admin/archery/note/page': {
    /** 分页训练笔记列表 */
    post: operations['NoteController_getNotePageList']
  }
  '/admin/archery/note/save': {
    /** 保存训练笔记 */
    post: operations['NoteController_saveNote']
  }
  '/admin/archery/note/student/page': {
    /** 学员分页训练笔记列表 */
    post: operations['NoteController_getNotePageListByStudent']
  }
  '/admin/archery/note/trainer/page': {
    /** 教练分页训练笔记列表 */
    post: operations['NoteController_getNotePageListByTrainer']
  }
  '/admin/archery/note/id': {
    /** id查询训练笔记 */
    get: operations['NoteController_getNoteById']
  }
  '/admin/archery/note/delete': {
    /** id删除训练笔记 */
    post: operations['NoteController_deleteNoteById']
  }
  '/admin/archery/note/student/delete': {
    /** 学员id删除训练笔记 */
    post: operations['NoteController_deleteNoteByStudent']
  }
  '/admin/archery/note/trainer/reply': {
    /** 教练回复训练笔记 */
    post: operations['NoteController_replyNoteById']
  }
  '/admin/archery/weixin/openid': {
    /** openid登录 */
    get: operations['WeixinController_openidLogin']
  }
  '/admin/archery/payment/page': {
    /** 获取支付记录列表 */
    post: operations['PaymentController_page']
  }
  '/admin/archery/payment/student/page': {
    /** 学员获取支付记录列表 */
    post: operations['PaymentController_studentPage']
  }
  '/admin/archery/payment/id': {
    /** 获取支付记录详情 */
    get: operations['PaymentController_id']
  }
  '/admin/archery/payment/transactions/jsapi': {
    /** 微信jsapi预支付下单 */
    post: operations['PaymentController_transactionsJsapi']
  }
  '/admin/archery/payment/notify': {
    /** 微信支付回调通知 */
    post: operations['PaymentController_notify']
  }
  '/admin/sys/user/page': {
    /** 分页用户列表 */
    post: operations['UserController_getUserPageList']
  }
  '/admin/sys/user/list': {
    /** 用户列表 */
    post: operations['UserController_getUserList']
  }
  '/admin/sys/user/create': {
    /** 创建用户 */
    post: operations['UserController_createUser']
  }
  '/admin/sys/user/update': {
    /** 更新用户 */
    post: operations['UserController_updateUser']
  }
  '/admin/sys/user/password': {
    /** 更新用户密码 */
    post: operations['UserController_updatePassword']
  }
  '/admin/sys/user/import': {
    /** 导入用户 */
    post: operations['UserController_importUser']
  }
  '/admin/sys/user/id': {
    /** id查询用户详情 */
    get: operations['UserController_getUserById']
  }
  '/admin/sys/user/delete': {
    /** id删除用户 */
    post: operations['UserController_deleteUserById']
  }
  '/admin/sys/login': {
    /** 登录 */
    post: operations['LoginController_login']
  }
  '/admin/sys/login/code': {
    /** 获取验证码 */
    get: operations['LoginController_getCode']
  }
  '/admin/sys/menu/page': {
    /** 分页菜单列表 */
    post: operations['MenuController_getMenuPageList']
  }
  '/admin/sys/menu/list': {
    /** 菜单列表 */
    post: operations['MenuController_getMenuList']
  }
  '/admin/sys/menu/save': {
    /** 保存菜单 */
    post: operations['MenuController_saveMenu']
  }
  '/admin/sys/menu/import': {
    /** 导入菜单 */
    post: operations['MenuController_importMenu']
  }
  '/admin/sys/menu/id': {
    /** id查询菜单详情 */
    get: operations['MenuController_getMenuById']
  }
  '/admin/sys/menu/delete': {
    /** id删除菜单 */
    post: operations['MenuController_deleteMenuById']
  }
  '/admin/sys/menu/routes': {
    /** 获取路由 */
    get: operations['MenuController_getRoutes']
  }
  '/admin/sys/role/page': {
    /** 分页角色列表 */
    post: operations['RoleController_getRolePageList']
  }
  '/admin/sys/role/list': {
    /** 角色列表 */
    post: operations['RoleController_getRoleList']
  }
  '/admin/sys/role/save': {
    /** 保存角色 */
    post: operations['RoleController_saveRole']
  }
  '/admin/sys/role/import': {
    /** 导入角色 */
    post: operations['RoleController_importRole']
  }
  '/admin/sys/role/id': {
    /** id查询角色详情 */
    get: operations['RoleController_getRoleById']
  }
  '/admin/sys/role/delete': {
    /** id删除角色 */
    post: operations['RoleController_deleteRoleById']
  }
  '/admin/sys/permission': {
    /** 获取用户权限 */
    get: operations['PermissionController_getPermission']
  }
  '/admin/sys/permission/userInfo': {
    /** 更新用户信息 */
    post: operations['PermissionController_updateUserInfo']
  }
  '/admin/sys/permission/updatePassword': {
    /** 修改用户密码 */
    post: operations['PermissionController_updatePassword']
  }
  '/admin/sys/logout': {
    /** 登出 */
    get: operations['LogoutController_logout']
  }
  '/admin/sys/online/list': {
    /** 分页在线用户列表 */
    post: operations['OnlineController_getOnlineUserList']
  }
  '/admin/sys/upload/img': {
    /** 上传图片 */
    post: operations['UploadController_upload']
  }
  '/admin/sys/upload/delete': {
    get: operations['UploadController_deleteAvatar']
  }
  '/admin/sys/queues/add': {
    /** 添加工作 */
    post: operations['QueuesController_addJob']
  }
  '/admin/sys/queues/remove': {
    /** 移除工作 */
    post: operations['QueuesController_removeJob']
  }
  '/admin/sys/queues/page': {
    /** 分页获取工作 */
    post: operations['QueuesController_getJobPage']
  }
  '/admin/sys/queues/id': {
    /** 根据ID获取工作 */
    get: operations['QueuesController_getJobById']
  }
  '/admin/sys/queues/consumerMethod': {
    /** 获取消费者方法 */
    get: operations['QueuesController_getConsumerMethod']
  }
  '/admin/sys/task/page': {
    /** 分页定时任务列表 */
    post: operations['TaskController_getTaskPageList']
  }
  '/admin/sys/task/list': {
    /** 定时任务列表 */
    post: operations['TaskController_getTaskList']
  }
  '/admin/sys/task/save': {
    /** 保存定时任务 */
    post: operations['TaskController_saveTask']
  }
  '/admin/sys/task/import': {
    /** 导入定时任务 */
    post: operations['TaskController_importTask']
  }
  '/admin/sys/task/id': {
    /** id查询定时任务详情 */
    get: operations['TaskController_getTaskById']
  }
  '/admin/sys/task/delete': {
    /** id删除定时任务 */
    post: operations['TaskController_deleteTaskById']
  }
  '/admin/sys/task/start': {
    /** 启动定时任务 */
    get: operations['TaskController_startTask']
  }
  '/admin/sys/task/stop': {
    /** 停止定时任务 */
    get: operations['TaskController_stopTask']
  }
  '/admin/sys/dictType/page': {
    /** 分页字典类型列表 */
    post: operations['DictTypeController_getDictTypePageList']
  }
  '/admin/sys/dictType/list': {
    /** 字典类型列表 */
    post: operations['DictTypeController_getDictTypeList']
  }
  '/admin/sys/dictType/save': {
    /** 保存字典类型 */
    post: operations['DictTypeController_saveDictType']
  }
  '/admin/sys/dictType/import': {
    /** 导入字典类型 */
    post: operations['DictTypeController_importDictType']
  }
  '/admin/sys/dictType/id': {
    /** id查询字典类型 */
    get: operations['DictTypeController_getDictTypeById']
  }
  '/admin/sys/dictType/delete': {
    /** id删除字典类型 */
    post: operations['DictTypeController_deleteDictTypeById']
  }
  '/admin/sys/dictType/code': {
    /** 根据字典类型编码查询字典类型和数据 */
    get: operations['DictTypeController_getDictTypeByCodeWithData']
  }
  '/admin/sys/dictData/page': {
    /** 分页字典数据列表 */
    post: operations['DictDataController_getDictDataPageList']
  }
  '/admin/sys/dictData/list': {
    /** 字典数据列表 */
    post: operations['DictDataController_getDictDataList']
  }
  '/admin/sys/dictData/save': {
    /** 保存字典数据 */
    post: operations['DictDataController_saveDictData']
  }
  '/admin/sys/dictData/import': {
    /** 导入字典数据 */
    post: operations['DictDataController_importDictData']
  }
  '/admin/sys/dictData/id': {
    /** id查询字典数据 */
    get: operations['DictDataController_getDictDataById']
  }
  '/admin/sys/dictData/delete': {
    /** id删除字典数据 */
    post: operations['DictDataController_deleteDictDataById']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    PageResultDto: {
      /** @description 当前页码 */
      currentPage: number
      /** @description 每页条数 */
      pageSize: number
      /** @description 总条数 */
      total: number
    }
    MenuEntity: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 父菜单id */
      parentId?: string
      /** @description 名称:类型为菜单时必填 */
      name?: string
      /** @description 路由页面时必填 */
      path?: string
      /** @description 路由页面时必填 */
      component?: string
      /** @description 菜单图标 */
      icon?: string
      /**
       * @description 菜单类型:0-一级菜单,1-子菜单,2-权限,3-外部链接
       * @enum {number}
       */
      menuType: 0 | 1 | 2 | 3
      /** @description 类型为权限时必填 */
      perms?: string[]
      /**
       * @description 打开方式:0-内部打开,1-外部打开，类型为外部链接时必填
       * @enum {number}
       */
      openType?: 0 | 1
      /** @description 排序 */
      sort: number
      /**
       * @description 是否缓存:0-不缓存,1-缓存
       * @default 1
       */
      keepalive?: number
    }
    RoleEntity: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 角色名称,查询时非必传,新增更新时必传 */
      name?: string
      /** @description 角色编码,查询时非必传,新增更新时必传 */
      code?: string
      /** @description 角色描述 */
      description?: string
      /** @description 菜单列表 */
      menus: readonly components['schemas']['MenuEntity'][]
    }
    UserEntity: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 用户账户,查询时非必传,新增更新时必传 */
      username?: string
      /** @description 微信小程序openid */
      openid?: string
      /** @description 密码 */
      password: string
      /** @description 用户名,查询时非必传,新增更新时必传 */
      realname?: string
      /** @description 头像 */
      avatar?: string
      /** @description 邮箱 */
      email?: string
      /** @description 手机号 */
      phone?: string
      /**
       * Format: date-time
       * @description 会员到期日期
       */
      memberDate?: string
      /** @description 是否是教练 */
      isTrainer?: boolean
      /** @description 角色列表 */
      roles: readonly components['schemas']['RoleEntity'][]
      /** @description 教练 */
      trainer: components['schemas']['UserEntity']
      /** @description 学生列表 */
      students: readonly components['schemas']['UserEntity'][]
    }
    /** @enum {string} */
    弓类型: '反曲弓' | '复合弓' | '光弓' | '传统弓'
    /** @enum {string} */
    射箭距离: '8' | '10' | '18' | '25' | '30' | '50' | '70' | '90'
    /** @enum {string} */
    靶纸类型:
      | '40三联'
      | '40全环'
      | '60半环'
      | '60全环'
      | '80半环'
      | '80全环'
      | '122全环'
      | '完美300'
    ScoringValuesEntity: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /** @description 环值 */
      values: ('1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | 'X' | 'M')[]
      /** @description 箭孔 */
      holes?: string
      /** Format: date-time */
      createTime?: string
    }
    ScoringTypeEntity: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /**
       * @description 弓类型
       * @default 反曲弓
       */
      bowType: components['schemas']['弓类型']
      /**
       * @description 射箭距离
       * @default 8
       */
      distance: components['schemas']['射箭距离']
      /**
       * @description 靶纸类型
       * @default 40三联
       */
      targetPaper: components['schemas']['靶纸类型']
      /** @description 组数量 */
      groupNum: number
      /** @description 单组箭数量 */
      singleGroupArrowNum: number
      /** @description 总环值 */
      total: number
      /** @description 组均环值 */
      groupAverageValue: number
      /** @description 箭均环值 */
      arrowAverageValue: number
      /** @description X数量 */
      xNum: number
      /** @description 10数量 */
      tenNum: number
      /** @description 9数量 */
      nineNum: number
      /** @description 8数量 */
      eightNum: number
      /** @description 7数量 */
      sevenNum: number
      /** @description 6数量 */
      sixNum: number
      /** @description 5数量 */
      fiveNum: number
      /** @description 4数量 */
      fourNum: number
      /** @description 3数量 */
      threeNum: number
      /** @description 2数量 */
      twoNum: number
      /** @description 1数量 */
      oneNum: number
      /** @description M数量 */
      mNum: number
      values: components['schemas']['ScoringValuesEntity'][]
    }
    ScoringPageListDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** @description 用户 */
      studentId?: string
      /** @description 弓类型 */
      bowType?: components['schemas']['弓类型']
      /** @description 射箭距离 */
      distance?: components['schemas']['射箭距离']
      /** @description 靶纸类型 */
      targetPaper?: components['schemas']['靶纸类型']
      /** @description 计分日期 */
      scoringDate?: string[]
    }
    ScoringSaveDto: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /**
       * @description 弓类型
       * @default 反曲弓
       */
      bowType: components['schemas']['弓类型']
      /**
       * @description 射箭距离
       * @default 8
       */
      distance: components['schemas']['射箭距离']
      /**
       * @description 靶纸类型
       * @default 40三联
       */
      targetPaper: components['schemas']['靶纸类型']
      /** @description 组数量 */
      groupNum: number
      /** @description 单组箭数量 */
      singleGroupArrowNum: number
      /** @description 环值 */
      values: ('1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | 'X' | 'M')[][]
      /** @description 箭孔 */
      holes?: number[][][]
    }
    PageRequestDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
    }
    DeleteResult: Record<string, never>
    ScoringSummaryByStudentDto: {
      /** @description 累计训练天数 */
      cumulativeDays: number
      /** @description 连续训练天数 */
      continuousDays: number
      /** @description 累计箭数 */
      arrowsNum: number
      /** @description 支均环值 */
      averageValue: number
      /** @description 十环次数 */
      tenNum: number
      /** @description X次数 */
      xNum: number
    }
    ScoringStatisticsSummaryByStudentDto: {
      /** @description 支数 */
      arrowsNum: number
      /** @description 组数 */
      groupNum: number
      /** @description 场数 */
      sessionsNum: number
    }
    ScoringStatisticsArrowCountByStudentDto: {
      /** @description 本日 */
      today: string
      /** @description 本日箭数 */
      todayNum: number
      /** @description 上日 */
      yesterday: string
      /** @description 上日箭数 */
      yesterdayNum: number
      /** @description 日均箭数 */
      averageDay: number
      /** @description 本周 */
      thisWeek: string
      /** @description 本周箭数 */
      thisWeekNum: number
      /** @description 上周 */
      lastWeek: string
      /** @description 上周箭数 */
      lastWeekNum: number
      /** @description 周均箭数 */
      averageWeek: number
      /** @description 本月 */
      thisMonth: string
      /** @description 本月箭数 */
      thisMonthNum: number
      /** @description 上月 */
      lastMonth: string
      /** @description 上月箭数 */
      lastMonthNum: number
      /** @description 月均箭数 */
      averageMonth: number
      /** @description 上年 */
      thisYear: string
      /** @description 上年箭数 */
      thisYearNum: number
      /** @description 上年 */
      lastYear: string
      /** @description 上年箭数 */
      lastYearNum: number
      /** @description 年均箭数 */
      averageYear: number
    }
    ScoringStatisticsChartsByStudentDto: {
      /** @description 时间列表 */
      dateList: string[]
      /** @description 平均箭数 */
      averageArrowsNum: number
      /** @description 箭数列表 */
      arrowsNumList: number[]
      /** @description 平均环值 */
      averageValueNum: number
      /** @description 环值列表 */
      valueList: number[]
      /** @description 分布X列表 */
      xList: number[]
      /** @description 分布10列表 */
      tenList: number[]
      /** @description 分布9列表 */
      nineList: number[]
      /** @description 分布8列表 */
      eightList: number[]
      /** @description 分布7列表 */
      sevenList: number[]
      /** @description 分布6列表 */
      sixList: number[]
      /** @description 分布5列表 */
      fiveList: number[]
      /** @description 分布4列表 */
      fourList: number[]
      /** @description 分布3列表 */
      threeList: number[]
      /** @description 分布2列表 */
      twoList: number[]
      /** @description 分布1列表 */
      oneList: number[]
      /** @description 分布M列表 */
      mList: number[]
    }
    /** @enum {string} */
    房间状态: '0' | '1' | '2'
    TimerEntity: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /**
       * @description 0-准备，1-已开始，2-结束
       * @default 0
       */
      state: components['schemas']['房间状态']
      /** @description 进入房间的用户 */
      users: readonly components['schemas']['UserEntity'][]
      /** @description 阶段列表 */
      roundList: string[]
      /** @description 射箭列表，同组之间以','分割 */
      shootList: string[]
      /** @description 倒计时列表 */
      timerList: number[]
    }
    TimerPageListDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /** @description 0-准备，1-已开始，2-结束 */
      state?: components['schemas']['房间状态']
      /**
       * @description 是否启用:0-停用,1-启用
       * @default 1
       * @enum {string}
       */
      status?: '0' | '1'
    }
    TimerSaveDto: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 阶段列表 */
      roundList: string[]
      /** @description 射箭列表，同组之间以','分割 */
      shootList: string[]
      /** @description 倒计时列表 */
      timerList: number[]
    }
    TimerSchemaClass: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 0-准备，1-已开始，2-结束
       * @default 0
       */
      state: components['schemas']['房间状态']
      /** @description 阶段列表 */
      roundList: string[]
      /** @description 射箭列表，同组之间以','分割 */
      shootList: string[]
      /** @description 倒计时列表 */
      timerList: number[]
      /**
       * @description 定时器状态:0-运行，1-暂停
       * @enum {number}
       */
      timerState: 0 | 1
      /** @description 当前房间射箭人员id列表 */
      usrIds: string[]
      /** @description 当前索引 */
      currentIndex: number
      /**
       * Format: date-time
       * @description 当前阶段开始时间
       */
      currentRoundStartTime: string
      /** @description 当前阶段剩余时间 */
      currentRoundRemainingTime: number
      /** @description 消息队列id列表 */
      mqIdList: string[]
    }
    NoteEntity: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 训练地点 */
      address: string
      /** @description 笔记内容 */
      content: string
      /** @description 上传的图片列表 */
      imgList?: string[]
      /** @description 回复内容 */
      reply?: string
      /**
       * Format: date-time
       * @description 回复时间
       */
      replyTime?: string
      /** @description 回复用户 */
      replyUser?: components['schemas']['UserEntity']
    }
    NotePageListDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** @description 学员id */
      studentId?: string
      /** @description 训练地点 */
      address?: string
      /** @description 笔记内容 */
      content?: string
      /** @description 训练日期 */
      noteDate?: string[]
    }
    NoteSaveDto: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** @description 训练地点 */
      address: string
      /** @description 笔记内容 */
      content: string
      /** @description 上传的图片列表 */
      imgList?: string[]
    }
    NotePageListByStudentDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /** @description 笔记内容 */
      content?: string
    }
    NoteReplyDto: {
      /** @description 笔记id */
      id: string
      /** @description 回复内容 */
      reply: string
    }
    UpdateResult: Record<string, never>
    OpenidLoginDto: {
      /** @description token */
      token: string
      /** @description 是否新用户 */
      isNewUser: boolean
    }
    /** @enum {string} */
    商品名称: '月会员' | '年会员'
    /** @enum {number} */
    支付状态: 0 | 1
    PaymentRecordEntity: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 微信商户id */
      mchid: string
      /** @description 用户openid */
      openid: string
      /** @description 微信商户订单id */
      transactionId: string
      /**
       * @description 商品名称
       * @default 月会员
       */
      goodName: components['schemas']['商品名称']
      /** @description 支付金额 */
      price: number
      /**
       * Format: date-time
       * @description 旧会员到期日期
       */
      oldMemberDate: string
      /**
       * Format: date-time
       * @description 新会员到期日期
       */
      newMemberDate: string
      /**
       * @description 支付状态
       * @default 0
       */
      state: components['schemas']['支付状态']
    }
    PaymentRecordPageListDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /** @description 用户id */
      createUserId?: string
      /** @description 支付日期 */
      payDate?: string[]
    }
    TransactionsJsapiReqDto: {
      /**
       * @description 商品名称
       * @default 月会员
       */
      goodName: components['schemas']['商品名称']
      /** @description 用户openid */
      openid: string
    }
    TransactionsJsapiResDto: Record<string, never>
    UserPageListDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** @description 用户账户,查询时非必传,新增更新时必传 */
      username?: string
      /** @description 用户名,查询时非必传,新增更新时必传 */
      realname?: string
      /** @description 是否是教练 */
      isTrainer?: boolean
      /** @description 教练id */
      trainerId?: string
    }
    UserListDto: {
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** @description 用户账户,查询时非必传,新增更新时必传 */
      username?: string
      /** @description 用户名,查询时非必传,新增更新时必传 */
      realname?: string
      /** @description 是否是教练 */
      isTrainer?: boolean
      /** @description 教练id */
      trainerId?: string
    }
    UserCreateDto: {
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 用户账户,查询时非必传,新增更新时必传 */
      username?: string
      /** @description 微信小程序openid */
      openid?: string
      /** @description 密码 */
      password: string
      /** @description 用户名,查询时非必传,新增更新时必传 */
      realname?: string
      /** @description 头像 */
      avatar?: string
      /** @description 邮箱 */
      email?: string
      /** @description 手机号 */
      phone?: string
      /**
       * Format: date-time
       * @description 会员到期日期
       */
      memberDate?: string
      /** @description 是否是教练 */
      isTrainer?: boolean
      /** @description 角色ids */
      roleIds?: string[]
      /** @description 教练id */
      trainerId?: string
    }
    UserUpdateDto: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 微信小程序openid */
      openid?: string
      /** @description 用户名,查询时非必传,新增更新时必传 */
      realname?: string
      /** @description 头像 */
      avatar?: string
      /** @description 邮箱 */
      email?: string
      /** @description 手机号 */
      phone?: string
      /**
       * Format: date-time
       * @description 会员到期日期
       */
      memberDate?: string
      /** @description 是否是教练 */
      isTrainer?: boolean
      /** @description 角色ids */
      roleIds?: string[]
      /** @description 教练id */
      trainerId?: string
    }
    UpdatePasswordDto: {
      /** @description 用户id */
      id: string
      /** @description 密码 */
      password: string
      /** @description 确认密码 */
      confirmPassword: string
    }
    UserImportDto: {
      /** @description 用户列表 */
      list: components['schemas']['UserCreateDto'][]
    }
    UserSelectDto: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 用户账户,查询时非必传,新增更新时必传 */
      username?: string
      /** @description 微信小程序openid */
      openid?: string
      /** @description 用户名,查询时非必传,新增更新时必传 */
      realname?: string
      /** @description 头像 */
      avatar?: string
      /** @description 邮箱 */
      email?: string
      /** @description 手机号 */
      phone?: string
      /**
       * Format: date-time
       * @description 会员到期日期
       */
      memberDate?: string
      /** @description 是否是教练 */
      isTrainer?: boolean
      /** @description 学生列表 */
      students: readonly components['schemas']['UserEntity'][]
      /** @description 角色ids */
      roleIds?: string[]
      /** @description 教练id */
      trainerId?: string
    }
    LoginDto: {
      /** @description 用户账户,查询时非必传,新增更新时必传 */
      username?: string
      /** @description 密码 */
      password: string
      /** @description 验证码 */
      code: string
      /** @description 验证码id */
      codeId: string
    }
    Token: {
      /** @description Token */
      token: string
    }
    Code: {
      /** @description 验证码SVG */
      img: string
      /** @description 唯一id */
      id: string
    }
    MenuTree: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 父菜单id */
      parentId?: string
      /** @description 名称:类型为菜单时必填 */
      name?: string
      /** @description 路由页面时必填 */
      path?: string
      /** @description 路由页面时必填 */
      component?: string
      /** @description 菜单图标 */
      icon?: string
      /**
       * @description 菜单类型:0-一级菜单,1-子菜单,2-权限,3-外部链接
       * @enum {number}
       */
      menuType: 0 | 1 | 2 | 3
      /** @description 类型为权限时必填 */
      perms?: string[]
      /**
       * @description 打开方式:0-内部打开,1-外部打开，类型为外部链接时必填
       * @enum {number}
       */
      openType?: 0 | 1
      /** @description 排序 */
      sort: number
      /**
       * @description 是否缓存:0-不缓存,1-缓存
       * @default 1
       */
      keepalive?: number
      /** @description 子菜单数 */
      children: components['schemas']['MenuTree'][]
    }
    MenuPageListDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** @description 名称:类型为菜单时必填 */
      name?: string
    }
    MenuSaveDto: {
      /** @description 菜单列表 */
      list: components['schemas']['MenuEntity'][]
    }
    RolePageListDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** @description 角色名称,查询时非必传,新增更新时必传 */
      name?: string
      /** @description 角色编码,查询时非必传,新增更新时必传 */
      code?: string
    }
    RoleSaveDto: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 角色名称,查询时非必传,新增更新时必传 */
      name?: string
      /** @description 角色编码,查询时非必传,新增更新时必传 */
      code?: string
      /** @description 角色描述 */
      description?: string
      /** @description 菜单ID列表 */
      menuIds?: string[]
    }
    RoleImportDto: {
      /** @description 角色列表 */
      list: components['schemas']['RoleSaveDto'][]
    }
    UpdateUserInfoDto: {
      /** @description 用户名,查询时非必传,新增更新时必传 */
      realname?: string
      /** @description 头像 */
      avatar?: string
      /** @description 邮箱 */
      email?: string
      /** @description 手机号 */
      phone?: string
    }
    UpdateUserPasswordDto: {
      /** @description 原密码 */
      oldPassword: string
      /** @description 新密码 */
      newPassword: string
      /** @description 确认新密码 */
      confirmPassword: string
    }
    OnlineUserDto: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /** @description 用户账户,查询时非必传,新增更新时必传 */
      username?: string
      /** @description 用户名,查询时非必传,新增更新时必传 */
      realname?: string
      /** @description 头像 */
      avatar?: string
      /** @description 登录时间 */
      loginDate: string
      /** @description ip地址 */
      address: string
    }
    OnlineUserPageListDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /** @description 用户账户,查询时非必传,新增更新时必传 */
      username?: string
      /** @description 用户名,查询时非必传,新增更新时必传 */
      realname?: string
    }
    UploadDto: {
      /** Format: binary */
      file: string
    }
    JobDto: {
      /** @description 工作名称 */
      name: string
      /** @description 消费者方法 */
      method: string
      /** @description 通知用户 */
      notifier?: string
      /** @description 传递参数 */
      data: Record<string, never>
      /** @description 工作配置 */
      opts?: Record<string, never>
    }
    Job: Record<string, never>
    JobPageDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /** @description 工作名称 */
      name?: string
      /** @description 工作类型 */
      state?: string
    }
    TaskEntity: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 查询时非必传,新增更新时需要传 */
      name?: string
      /** @description 任务描述 */
      description?: string
      /** @description cron表达式 */
      cron: string
      /** @description 任务方法 */
      method: string
      /** @description 传递参数 */
      data?: Record<string, never>
    }
    TaskPageListDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** @description 查询时非必传,新增更新时需要传 */
      name?: string
    }
    TaskImportDto: {
      /** @description 定时任务列表 */
      list: components['schemas']['TaskEntity'][]
    }
    DictDataEntity: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 字典标签 */
      label: string
      /** @description 字典值 */
      value: string
      /** @description 字典描述 */
      description: string
      /** @description 排序 */
      sort: number
      /**
       * @description 是否默认
       * @default false
       */
      default: boolean
    }
    DictTypeEntity: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 字典类型名称 */
      name: string
      /** @description 字典类型编码 */
      code: string
      /** @description 字典类型描述 */
      description?: string
      /** @description 字典数据 */
      data: readonly components['schemas']['DictDataEntity'][]
    }
    DictTypePageListDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** @description 字典类型名称 */
      name?: string
      /** @description 字典类型编码 */
      code?: string
    }
    SaveDictTypeDto: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 字典类型名称 */
      name: string
      /** @description 字典类型编码 */
      code: string
      /** @description 字典类型描述 */
      description?: string
    }
    DictTypeImportDto: {
      /** @description 字典类型列表 */
      list: components['schemas']['DictTypeEntity'][]
    }
    DictDataPageListDto: {
      /**
       * @description 当前页码
       * @default 1
       */
      currentPage?: number
      /**
       * @description 页大小
       * @default 10
       */
      pageSize?: number
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** @description 字典类型ID */
      typeId: string
      /** @description 字典标签 */
      label?: string
      /** @description 字典值 */
      value?: string
    }
    DictDataSaveDto: {
      /** @description id,新增时不需要传,更新时需要传 */
      id?: string
      /**
       * @description 是否启用:0-停用,1-启用
       * @enum {string}
       */
      status?: '0' | '1'
      /** Format: date-time */
      createTime?: string
      /** Format: date-time */
      updateTime?: string
      /** @description 创建用户 */
      createUser?: components['schemas']['UserEntity']
      /** @description 更新用户 */
      updateUser?: components['schemas']['UserEntity']
      /** Format: date-time */
      deleteTime?: string
      /** @description 字典标签 */
      label: string
      /** @description 字典值 */
      value: string
      /** @description 字典描述 */
      description: string
      /** @description 排序 */
      sort: number
      /**
       * @description 是否默认
       * @default false
       */
      default: boolean
      /** @description 字典类型ID */
      typeId: string
    }
    DictDataImportDto: {
      /** @description 字典类型ID */
      typeId: string
      /** @description 字典类型列表 */
      list: components['schemas']['DictDataEntity'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** 分页计分本列表 */
  ScoringController_getScoringPageList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ScoringPageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['ScoringTypeEntity'][]
          }
        }
      }
    }
  }
  /** 保存计分本 */
  ScoringController_saveScoring: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ScoringSaveDto']
      }
    }
    responses: {
      /** @description 保存计分本 */
      200: {
        content: {
          'application/json': components['schemas']['ScoringTypeEntity']
        }
      }
    }
  }
  /** 学员分页计分本列表 */
  ScoringController_getScoringPageListByStudent: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PageRequestDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['ScoringTypeEntity'][]
          }
        }
      }
    }
  }
  /** 教练分页计分本列表 */
  ScoringController_getScoringPageListByTrainer: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ScoringPageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['ScoringTypeEntity'][]
          }
        }
      }
    }
  }
  /** id查询计分本 */
  ScoringController_getScoringById: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id查询计分本 */
      200: {
        content: {
          'application/json': components['schemas']['ScoringTypeEntity']
        }
      }
    }
  }
  /** id查询计分本(会员) */
  ScoringController_getMemberScoringById: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id查询计分本(会员) */
      200: {
        content: {
          'application/json': components['schemas']['ScoringTypeEntity']
        }
      }
    }
  }
  /** id删除计分本 */
  ScoringController_deleteScoringById: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id删除计分本 */
      200: {
        content: {
          'application/json': components['schemas']['DeleteResult']
        }
      }
    }
  }
  /** 训练汇总 */
  ScoringController_summaryByStudent: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 训练汇总 */
      200: {
        content: {
          'application/json': components['schemas']['ScoringSummaryByStudentDto']
        }
      }
    }
  }
  /** 训练统计-训练汇总 */
  ScoringController_getStatisticsSummaryByStudent: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 训练统计-训练汇总 */
      200: {
        content: {
          'application/json': components['schemas']['ScoringStatisticsSummaryByStudentDto']
        }
      }
    }
  }
  /** 训练统计-箭数概况 */
  ScoringController_getStatisticsArrowCountByStudent: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 训练统计-箭数概况 */
      200: {
        content: {
          'application/json': components['schemas']['ScoringStatisticsArrowCountByStudentDto']
        }
      }
    }
  }
  /** 训练统计-图表 */
  ScoringController_getStatisticsChartsByStudent: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 训练统计-图表 */
      200: {
        content: {
          'application/json': components['schemas']['ScoringStatisticsChartsByStudentDto']
        }
      }
    }
  }
  /** 分页定时器房间列表 */
  TimerController_getTimerPageList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TimerPageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['TimerEntity'][]
          }
        }
      }
    }
  }
  /** 保存定时器 */
  TimerController_saveTimer: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TimerSaveDto']
      }
    }
    responses: {
      /** @description 定时器 */
      200: {
        content: {
          'application/json': components['schemas']['TimerEntity']
        }
      }
    }
  }
  /** 根据id获取定时器 */
  TimerController_getTimerById: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 根据id获取定时器 */
      200: {
        content: {
          'application/json': components['schemas']['TimerEntity']
        }
      }
    }
  }
  /** id删除定时器 */
  TimerController_deleteTimerById: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id删除定时器 */
      200: {
        content: {
          'application/json': components['schemas']['DeleteResult']
        }
      }
    }
  }
  /** 获取用户创建或参与的定时器 */
  TimerController_getTimerByUser: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 获取用户创建或参与的定时器 */
      200: {
        content: {
          'application/json': components['schemas']['TimerEntity']
        }
      }
    }
  }
  /** 加入定时器 */
  TimerController_joinTimerByUser: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 加入定时器 */
      200: {
        content: {
          'application/json': components['schemas']['TimerEntity']
        }
      }
    }
  }
  /** 根据id开始定时器 */
  TimerController_startTimer: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 定时器 */
      200: {
        content: {
          'application/json': components['schemas']['TimerSchemaClass']
        }
      }
    }
  }
  /** 分页训练笔记列表 */
  NoteController_getNotePageList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NotePageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['NoteEntity'][]
          }
        }
      }
    }
  }
  /** 保存训练笔记 */
  NoteController_saveNote: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NoteSaveDto']
      }
    }
    responses: {
      /** @description 保存训练笔记 */
      200: {
        content: {
          'application/json': components['schemas']['NoteEntity']
        }
      }
    }
  }
  /** 学员分页训练笔记列表 */
  NoteController_getNotePageListByStudent: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NotePageListByStudentDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['NoteEntity'][]
          }
        }
      }
    }
  }
  /** 教练分页训练笔记列表 */
  NoteController_getNotePageListByTrainer: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NotePageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['NoteEntity'][]
          }
        }
      }
    }
  }
  /** id查询训练笔记 */
  NoteController_getNoteById: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id查询训练笔记 */
      200: {
        content: {
          'application/json': components['schemas']['NoteEntity']
        }
      }
    }
  }
  /** id删除训练笔记 */
  NoteController_deleteNoteById: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id删除训练笔记 */
      200: {
        content: {
          'application/json': components['schemas']['DeleteResult']
        }
      }
    }
  }
  /** 学员id删除训练笔记 */
  NoteController_deleteNoteByStudent: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 学员id删除训练笔记 */
      200: {
        content: {
          'application/json': components['schemas']['DeleteResult']
        }
      }
    }
  }
  /** 教练回复训练笔记 */
  NoteController_replyNoteById: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NoteReplyDto']
      }
    }
    responses: {
      /** @description 教练回复训练笔记 */
      200: {
        content: {
          'application/json': components['schemas']['UpdateResult']
        }
      }
    }
  }
  /** openid登录 */
  WeixinController_openidLogin: {
    parameters: {
      query: {
        code: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['OpenidLoginDto']
        }
      }
    }
  }
  /** 获取支付记录列表 */
  PaymentController_page: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentRecordPageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['PaymentRecordEntity'][]
          }
        }
      }
    }
  }
  /** 学员获取支付记录列表 */
  PaymentController_studentPage: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PageRequestDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['PaymentRecordEntity'][]
          }
        }
      }
    }
  }
  /** 获取支付记录详情 */
  PaymentController_id: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaymentRecordEntity']
        }
      }
    }
  }
  /** 微信jsapi预支付下单 */
  PaymentController_transactionsJsapi: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TransactionsJsapiReqDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TransactionsJsapiResDto']
        }
      }
    }
  }
  /** 微信支付回调通知 */
  PaymentController_notify: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** 分页用户列表 */
  UserController_getUserPageList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserPageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['UserEntity'][]
          }
        }
      }
    }
  }
  /** 用户列表 */
  UserController_getUserList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserListDto']
      }
    }
    responses: {
      /** @description 用户列表 */
      200: {
        content: {
          'application/json': components['schemas']['UserEntity'][]
        }
      }
    }
  }
  /** 创建用户 */
  UserController_createUser: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserCreateDto']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** 更新用户 */
  UserController_updateUser: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdateDto']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** 更新用户密码 */
  UserController_updatePassword: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePasswordDto']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** 导入用户 */
  UserController_importUser: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserImportDto']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** id查询用户详情 */
  UserController_getUserById: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id查询用户详情 */
      200: {
        content: {
          'application/json': components['schemas']['UserSelectDto']
        }
      }
    }
  }
  /** id删除用户 */
  UserController_deleteUserById: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id删除用户 */
      200: {
        content: {
          'application/json': components['schemas']['DeleteResult']
        }
      }
    }
  }
  /** 登录 */
  LoginController_login: {
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginDto']
      }
    }
    responses: {
      /** @description 登录成功 */
      200: {
        content: {
          'application/json': components['schemas']['Token']
        }
      }
    }
  }
  /** 获取验证码 */
  LoginController_getCode: {
    responses: {
      /** @description 获取验证码成功 */
      200: {
        content: {
          'application/json': components['schemas']['Code']
        }
      }
    }
  }
  /** 分页菜单列表 */
  MenuController_getMenuPageList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MenuPageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['MenuTree'][]
          }
        }
      }
    }
  }
  /** 菜单列表 */
  MenuController_getMenuList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MenuPageListDto']
      }
    }
    responses: {
      /** @description 菜单列表 */
      200: {
        content: {
          'application/json': components['schemas']['MenuEntity'][]
        }
      }
    }
  }
  /** 保存菜单 */
  MenuController_saveMenu: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MenuEntity']
      }
    }
    responses: {
      /** @description 保存菜单 */
      200: {
        content: {
          'application/json': components['schemas']['MenuEntity']
        }
      }
    }
  }
  /** 导入菜单 */
  MenuController_importMenu: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MenuSaveDto']
      }
    }
    responses: {
      /** @description 导入菜单 */
      200: {
        content: {
          'application/json': components['schemas']['MenuEntity'][]
        }
      }
    }
  }
  /** id查询菜单详情 */
  MenuController_getMenuById: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id查询菜单详情 */
      200: {
        content: {
          'application/json': components['schemas']['MenuEntity']
        }
      }
    }
  }
  /** id删除菜单 */
  MenuController_deleteMenuById: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id删除菜单 */
      200: {
        content: {
          'application/json': components['schemas']['DeleteResult']
        }
      }
    }
  }
  /** 获取路由 */
  MenuController_getRoutes: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 获取路由 */
      200: {
        content: {
          'application/json': string[]
        }
      }
    }
  }
  /** 分页角色列表 */
  RoleController_getRolePageList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RolePageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['RoleEntity'][]
          }
        }
      }
    }
  }
  /** 角色列表 */
  RoleController_getRoleList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RolePageListDto']
      }
    }
    responses: {
      /** @description 角色列表 */
      200: {
        content: {
          'application/json': components['schemas']['RoleEntity'][]
        }
      }
    }
  }
  /** 保存角色 */
  RoleController_saveRole: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleSaveDto']
      }
    }
    responses: {
      /** @description 保存角色 */
      200: {
        content: {
          'application/json': components['schemas']['RoleEntity']
        }
      }
    }
  }
  /** 导入角色 */
  RoleController_importRole: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoleImportDto']
      }
    }
    responses: {
      /** @description 导入角色 */
      200: {
        content: {
          'application/json': components['schemas']['RoleEntity'][]
        }
      }
    }
  }
  /** id查询角色详情 */
  RoleController_getRoleById: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id查询角色详情 */
      200: {
        content: {
          'application/json': components['schemas']['RoleSaveDto']
        }
      }
    }
  }
  /** id删除角色 */
  RoleController_deleteRoleById: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id删除角色 */
      200: {
        content: {
          'application/json': components['schemas']['DeleteResult']
        }
      }
    }
  }
  /** 获取用户权限 */
  PermissionController_getPermission: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 用户权限 */
      200: {
        content: {
          'application/json': components['schemas']['UserEntity']
        }
      }
    }
  }
  /** 更新用户信息 */
  PermissionController_updateUserInfo: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserInfoDto']
      }
    }
    responses: {
      /** @description 用户信息 */
      200: {
        content: {
          'application/json': components['schemas']['UpdateResult']
        }
      }
    }
  }
  /** 修改用户密码 */
  PermissionController_updatePassword: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserPasswordDto']
      }
    }
    responses: {
      /** @description 修改用户密码 */
      200: {
        content: {
          'application/json': components['schemas']['UpdateResult']
        }
      }
    }
  }
  /** 登出 */
  LogoutController_logout: {
    responses: {
      /** @description 登出 */
      200: {
        content: never
      }
    }
  }
  /** 分页在线用户列表 */
  OnlineController_getOnlineUserList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OnlineUserPageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['OnlineUserDto'][]
          }
        }
      }
    }
  }
  /** 上传图片 */
  UploadController_upload: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    /** @description Upload file */
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['UploadDto']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  UploadController_deleteAvatar: {
    parameters: {
      query: {
        filename: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** 添加工作 */
  QueuesController_addJob: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['JobDto']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** 移除工作 */
  QueuesController_removeJob: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** 分页获取工作 */
  QueuesController_getJobPage: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['JobPageDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['Job'][]
          }
        }
      }
    }
  }
  /** 根据ID获取工作 */
  QueuesController_getJobById: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Job']
        }
      }
    }
  }
  /** 获取消费者方法 */
  QueuesController_getConsumerMethod: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': string[]
        }
      }
    }
  }
  /** 分页定时任务列表 */
  TaskController_getTaskPageList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskPageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['TaskEntity'][]
          }
        }
      }
    }
  }
  /** 定时任务列表 */
  TaskController_getTaskList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskPageListDto']
      }
    }
    responses: {
      /** @description 定时任务列表 */
      200: {
        content: {
          'application/json': components['schemas']['TaskEntity'][]
        }
      }
    }
  }
  /** 保存定时任务 */
  TaskController_saveTask: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskEntity']
      }
    }
    responses: {
      /** @description 保存定时任务 */
      200: {
        content: {
          'application/json': components['schemas']['TaskEntity']
        }
      }
    }
  }
  /** 导入定时任务 */
  TaskController_importTask: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskImportDto']
      }
    }
    responses: {
      /** @description 导入定时任务 */
      200: {
        content: {
          'application/json': components['schemas']['TaskEntity'][]
        }
      }
    }
  }
  /** id查询定时任务详情 */
  TaskController_getTaskById: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id查询定时任务详情 */
      200: {
        content: {
          'application/json': components['schemas']['TaskEntity']
        }
      }
    }
  }
  /** id删除定时任务 */
  TaskController_deleteTaskById: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id删除定时任务 */
      200: {
        content: {
          'application/json': components['schemas']['DeleteResult']
        }
      }
    }
  }
  /** 启动定时任务 */
  TaskController_startTask: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 启动定时任务 */
      200: {
        content: {
          'application/json': components['schemas']['TaskEntity']
        }
      }
    }
  }
  /** 停止定时任务 */
  TaskController_stopTask: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 停止定时任务 */
      200: {
        content: {
          'application/json': components['schemas']['TaskEntity']
        }
      }
    }
  }
  /** 分页字典类型列表 */
  DictTypeController_getDictTypePageList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DictTypePageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['DictTypeEntity'][]
          }
        }
      }
    }
  }
  /** 字典类型列表 */
  DictTypeController_getDictTypeList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DictTypePageListDto']
      }
    }
    responses: {
      /** @description 字典类型列表 */
      200: {
        content: {
          'application/json': components['schemas']['DictTypeEntity'][]
        }
      }
    }
  }
  /** 保存字典类型 */
  DictTypeController_saveDictType: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SaveDictTypeDto']
      }
    }
    responses: {
      /** @description 保存字典类型 */
      200: {
        content: {
          'application/json': components['schemas']['DictTypeEntity']
        }
      }
    }
  }
  /** 导入字典类型 */
  DictTypeController_importDictType: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DictTypeImportDto']
      }
    }
    responses: {
      /** @description 导入字典类型 */
      200: {
        content: {
          'application/json': components['schemas']['DictTypeEntity'][]
        }
      }
    }
  }
  /** id查询字典类型 */
  DictTypeController_getDictTypeById: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id查询字典类型 */
      200: {
        content: {
          'application/json': components['schemas']['DictTypeEntity']
        }
      }
    }
  }
  /** id删除字典类型 */
  DictTypeController_deleteDictTypeById: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id删除字典类型 */
      200: {
        content: {
          'application/json': components['schemas']['DeleteResult']
        }
      }
    }
  }
  /** 根据字典类型编码查询字典类型和数据 */
  DictTypeController_getDictTypeByCodeWithData: {
    parameters: {
      query: {
        code: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description 根据字典类型编码查询字典类型和数据 */
      200: {
        content: {
          'application/json': components['schemas']['DictTypeEntity']
        }
      }
    }
  }
  /** 分页字典数据列表 */
  DictDataController_getDictDataPageList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DictDataPageListDto']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResultDto'] & {
            records: components['schemas']['DictDataEntity'][]
          }
        }
      }
    }
  }
  /** 字典数据列表 */
  DictDataController_getDictDataList: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DictDataPageListDto']
      }
    }
    responses: {
      /** @description 字典数据列表 */
      200: {
        content: {
          'application/json': components['schemas']['DictDataEntity'][]
        }
      }
    }
  }
  /** 保存字典数据 */
  DictDataController_saveDictData: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DictDataSaveDto']
      }
    }
    responses: {
      /** @description 保存字典数据 */
      200: {
        content: {
          'application/json': components['schemas']['DictDataEntity']
        }
      }
    }
  }
  /** 导入字典数据 */
  DictDataController_importDictData: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DictDataImportDto']
      }
    }
    responses: {
      /** @description 导入字典数据 */
      200: {
        content: {
          'application/json': components['schemas']['DictDataEntity'][]
        }
      }
    }
  }
  /** id查询字典数据 */
  DictDataController_getDictDataById: {
    parameters: {
      query: {
        id: string
      }
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id查询字典数据 */
      200: {
        content: {
          'application/json': components['schemas']['DictDataEntity']
        }
      }
    }
  }
  /** id删除字典数据 */
  DictDataController_deleteDictDataById: {
    parameters: {
      header?: {
        /** @description Bearer token */
        Authorization?: string
      }
    }
    responses: {
      /** @description id删除字典数据 */
      200: {
        content: {
          'application/json': components['schemas']['DeleteResult']
        }
      }
    }
  }
}
